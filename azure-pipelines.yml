# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: Infra Pipeline

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
  - stage: Plan
    displayName: "Terraform Plan and export the infrastructure plan"
    condition: and(succeeded(), eq(variables.isMain, true))
    jobs:
      - job: terraformPlan
        steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'
        
        - task: TerraformTask@5
          displayName: initialize the terraform
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'AzureResourceManager'
            backendAzureRmResourceGroupName: $(rg-name)
            backendAzureRmStorageAccountName: $(storageAccountName)
            backendAzureRmContainerName: $(containerName)
            backendAzureRmKey: 'tf/terraform.tfstate'

        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_scripts'
            commandOptions: '-out=tfplan'
            environmentServiceNameAzureRM: 'AzureResourceManager'
        
        # - script: |
        #     terraform --version
        #     cd $(System.DefaultWorkingDirectory)/terraform_scripts
        #     terraform plan -out=tfplan
        #   displayName: check terraform version
        


  # - stage: Apply
  #   displayName: "Deploy infrastructure using Terraform"
  #   dependsOn: Plan
  #   jobs:
  #     - job: terraformApply