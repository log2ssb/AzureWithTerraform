# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: Infra Pipeline

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
  - stage: Plan
    displayName: "Terraform Plan"
    condition: and(succeeded(), eq(variables.isMain, true))
    jobs:
      - job: terraformPlan
        steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: '1.12.2'
        
        - task: TerraformTask@5
          displayName: initialize the terraform
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_scripts'
            backendServiceArm: 'AzureResourceManager'
            backendAzureRmResourceGroupName: '$(rg-name)'
            backendAzureRmStorageAccountName: '$(storageAccountName)'
            backendAzureRmContainerName: '$(containerName)'
            backendAzureRmKey: 'tf/terraform.tfstate'

        - task: TerraformTask@5
          displayName: Terraform Plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_scripts'
            commandOptions: '-var "client_secret=$(client_secret)" -out=tfplan'
            environmentServiceNameAzureRM: 'AzureResourceManager'

  # - stage: Apply1
  #   displayName: "Deploy Infrastructure"
  #   dependsOn: Plan
  #   jobs:
  #     - job: terraformApply
  #       displayName: Terraform Apply
  #       steps:
  #         - task: TerraformInstaller@1
  #           displayName: Install latest terraform
  #           inputs:
  #             terraformVersion: '1.12.2'
          
  #         - script: terraform -version
  #           displayName: "Check Terraform Version"

  #         - task: TerraformTask@5
  #           displayName: Initialize the terraform
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'init'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_scripts'
  #             backendServiceArm: 'AzureResourceManager'
  #             backendAzureRmResourceGroupName: '$(rg-name)'
  #             backendAzureRmStorageAccountName: '$(storageAccountName)'
  #             backendAzureRmContainerName: '$(containerName)'
  #             backendAzureRmKey: 'tf/state.tfstate'
              
  #         - task: TerraformTask@5
  #           displayName: Terraform Apply
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'apply'
  #             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_scripts'
  #             commandOptions: '-var "client_secret=$(client_secret)" --auto-approve tfplan'
  #             environmentServiceNameAzureRM: 'AzureResourceManager'

  - stage: Apply
    displayName: "Deploy infrastructure using Terraform"
    dependsOn: Plan
    # condition: eq(variables['Build.Reason'], 'Manual')
    jobs:
      - deployment: terraformApply
        environment: terraform-apply
        strategy:
         runOnce:
           deploy:
             steps:
               - checkout: self
                 
               - task: TerraformInstaller@1
                 displayName: Install latest terraform
                 inputs:
                   terraformVersion: '1.12.2'
              
               - script: terraform -version
                 displayName: "Check Terraform Version"

               - script: |
                   terraform --version
                   cd $(System.DefaultWorkingDirectory)/terraform_scripts/
                   ls -lrth
                   terraform init -backend-config="storage_account_name=$(storageAccountName)" -backend-config="container_name=$(containerName)" -backend-config="key=$(key)"
                 displayName: Terraform Init

              #  - script: |
              #      cd $(System.DefaultWorkingDirectory)/terraform_scripts/
              #      terraform plan -var "client_secret=$(client_secret) -out=tfplan
              #    displayName: Terraform Plan
               
               - script: |
                   cd $(System.DefaultWorkingDirectory)/terraform_scripts/
                   terraform apply -var "client_secret=$(client_secret) -auto-approve tfplan
                 displayName: Terraform apply
                 condition: succeeded()
                 
              #  - task: TerraformTask@5
              #    displayName: Initialize the terraform
              #    inputs:
              #      provider: 'azurerm'
              #      command: 'init'
              #      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_scripts'
              #      backendServiceArm: 'AzureResourceManager'
              #      backendAzureRmResourceGroupName: '$(rg-name)'
              #      backendAzureRmStorageAccountName: '$(storageAccountName)'
              #      backendAzureRmContainerName: '$(containerName)'
              #      backendAzureRmKey: 'tf/state.tfstate'
              
              #  - task: TerraformTask@5
              #    displayName: Terraform Apply
              #    inputs:
              #      provider: 'azurerm'
              #      command: 'apply'
              #      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_scripts'
              #      commandOptions: '-var "client_secret=$(client_secret)" --auto-approve tfplan'
              #      environmentServiceNameAzureRM: 'AzureResourceManager'

  - stage: Destroy
    displayName: Destroy the infrastructure
    dependsOn: Apply
    # condition: eq(variables['Build.Reason'], 'Manual')  # Optional: limit to manual triggers
    jobs:
      - deployment: terraformDestroy
        environment: terraform-destroy
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: TerraformInstaller@1
                  inputs:
                    terraformVersion: '1.12.2'

                - script: |
                   terraform --version
                   cd $(System.DefaultWorkingDirectory)/terraform_scripts/
                   ls -lrth
                   terraform init -backend-config="storage_account_name=$(storageAccountName)" -backend-config="container_name=$(containerName)" -backend-config="key=$(key)"
                  displayName: Terraform Init

                - script: |
                   cd $(System.DefaultWorkingDirectory)/terraform_scripts/
                   terraform destroy -var "client_secret=$(client_secret) -auto-approve
                  displayName: Terraform destroy
                  condition: succeeded()

                # - task: TerraformTask@5
                #   displayName: Terraform Destroy
                #   inputs:
                #     provider: 'azurerm'
                #     command: 'destroy'
                #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform_scripts'
                #     commandOptions: '-var "client_secret=$(client_secret)" -auto-approve'
                #     environmentServiceNameAzureRM: 'AzureResourceManager'